@page "/createpassword"

@using CustomerPortal.Models.Request
@using CustomerPortal.Account
@using Microsoft.AspNetCore.WebUtilities
@inject IAccountService _accountService;
@inject NavigationManager NavigationManager
@inherits EmptyLayout;
@inject IAccountService _accountService;
@inject ISnackbar Snackbar

<section>
    <div class="contentBx">
        <div class="card">
            <div class="card-body">
                <div class="formBx">
                    <h2>Set up password</h2>
                    <form>
                        <div>
                            <div class="input-row">
                                <div class="form-group">
                                    <label for="firstName">Password:</label>
                                    <input id="firstName" type="password" class="form-control form-control-lg" @bind="password.Password" />
                                </div>
                                <div class="form-group">
                                    <label for="lastName">Confirm Password:</label>
                                    <input id="lastName" type="password" class="form-control form-control-lg" @bind="confirmPassword" />
                                </div>
                            </div>

                            <button type="button" class="btn btn-primary mt-3" @onclick="HandleSubmit">Submit</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>


@code {

    [Parameter] public string AccountNumber { get; set; }
    CreatePasswordRequest password = new CreatePasswordRequest();
    string confirmPassword = "";



    private void HandleSubmit()
    {

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accountNumber", out var accountNumber))
        {
            AccountNumber = accountNumber;
        }

        if(password.Password != confirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Error);

            return;
        }

        if (ValidatePasswordRequest())
        {
            SubmitForm();
        }
        else
        {
            Snackbar.Add("Please fill all information", Severity.Error);
        }
    }

    private bool ValidatePasswordRequest()
    {
        var validationContext = new ValidationContext(password, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        return Validator.TryValidateObject(password, validationContext, validationResults, true);
    }

    private async void SubmitForm()
    {
        password.AccountNo = AccountNumber;

        var createAccount = await _accountService.CreatePassword(password);

        if (createAccount.Success)
        {
            Snackbar.Add("Password Created Successfully", Severity.Info);

            await Task.Delay(3000);

            NavigationManager.NavigateTo($"/login");
        }
        else
        {
            Snackbar.Add(createAccount.Message, Severity.Error);
        }     
    }

}

@code {

}
